<%# パレット作成・編集ページでのAlpine実行用パーシャル %>
<script>
  // 下書きボタンが押された時のための処理。
  function statusDraft(){
    document.getElementById('post_status').value = 'draft';
  }
  // 公開ボタンが押された時のための処理。
  function statusPublished(){
    document.getElementById('post_status').value = 'published';
  }

  // 確認ダイアログを手動で出す。
  function confirmAndSubmit(button) {
    const message = button.dataset.turboConfirm; // turbo_confirmのメッセージを取得
    if (confirm(message)) { // 確認ダイアログを表示
      button.form.submit(); // フォームを送信
    }
  }


  // ベースが選択された時に色選択画面にベースの色を反映させるための関数。
  // Alpine.jsで呼び出すにはhtmlのscript内で書かないといけない？？
  function baseToSelector(basedNum){
    window.currentBaseNum = basedNum; // 他の処理でも選択中のベース番号を扱うための上書き処理。
    document.getElementById('selected-base').style.fill = window.colors[basedNum - 1];
    document.getElementById('selected-mini-base').style.background = window.colors[basedNum - 1];
    document.getElementById('selected-color').textContent = window.colors[basedNum - 1];
  }

  // 削除ボタンが押された時のパレット再整列処理
  function deleteColors(baseNum){
    window.colors.splice(baseNum - 1, 1);
    for (let i = 1; i <= window.colors.length; i++){
      resetLists = document.getElementsByClassName(`reset-base-${i}`);
      resetLists[0].style.fill = window.colors[i - 1];
      resetLists[1].style.background = window.colors[i - 1];
      resetLists[2].textContent = window.colors[i - 1];
      resetLists[3].style.background = window.colors[i - 1];
    }
  }

  // 追加ボタンが押された時のパレット再生列処理。
  function addColors(){
    // 候補色セットのループ処理抜け出し用変数。
    let setSituation = false;
    while( !setSituation ) { // setSituationがfalseの間は繰り返す。
      // 追加候補のdefaultAddColorsから先頭の値を一つ取り出す。
      const candidateColor = window.defaultAddColors.shift();
      if (!window.colors.includes(candidateColor)){ // colorsにcandidateColorが含まれてない時だけ処理実行。
        // 色を配列に一つ追加する。
        window.colors.push(candidateColor);
        setSituation = true;
      }
      // colorsに追加できたら、候補として取り出してた色をdefaultAddColorsの最後に戻す。
      window.defaultAddColors.push(candidateColor);
    }
    // 配列の要素数を取得する。
    const addIndex = window.colors.length;
    // 配列の最後の値をベースの最後に反映させる。
    resetLists = document.getElementsByClassName(`reset-base-${addIndex}`);
      resetLists[0].style.fill = window.colors[addIndex - 1];
      resetLists[1].style.background = window.colors[addIndex - 1];
      resetLists[2].textContent = window.colors[addIndex - 1];
      // 比率部分の色確認サークルのカラー変更
      resetLists[3].style.background = window.colors[addIndex - 1];
  }

  // スライダーを最新に変更する関数。(色が変更される処理のときに実行する。)
  function recreateSlider(){
    // 現在のスライダーを削除
    window.slider.noUiSlider.destroy();
    // 新しいスライダーを作成
    createSlider();
    // つまみ間に色をつけたい。
    connect = slider.querySelectorAll('.noUi-connect');
    for (var i = 0; i < connect.length; i++) {
        connect[i].style.background = window.colors[i]; // backgroundのスタイルを直接指定する。
    }
    window.updateRatio();
  }

</script>